// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int            @id @default(autoincrement())
  email                String         @unique
  hashedPassword       String
  name                 String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  role                 Role
  photoURL             String?
  description          String?
  phoneNumber          String?
  thanhpho             String?
  quanhuyen            String?
  age                  Int?
  sex                  String?
  isReadNotification   Boolean?       @default(false)
  notes                Note[]
  works                UsersOnWorks[]
  postJob              PostJob[]
  Application          Application[]
  Contract             Contract[]
  employeeContract     Contract[]     @relation(name: "employee")
  NotificationSender   Notification[]
  NotificationReceiver Notification[] @relation(name: "receiver")
  // RoomChat             RoomChat[]
  Message              Message[]
  Member               Member[]

  @@map("users") // users id "table's name" in PostgreSQL
}

model Note {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  url         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@map("notes")
}

model Work {
  id        Int            @id @default(autoincrement())
  name      String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      UsersOnWorks[]
  postJob   PostJob[]

  @@map("works")
}

model UsersOnWorks {
  id            Int      @id @default(autoincrement())
  userId        Int
  user          User     @relation(fields: [userId], references: [id])
  photoURL      String?
  description   String?
  priceExpected String?
  status        Boolean? @default(true)
  workId        Int
  work          Work     @relation(fields: [workId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("usersonworks")
}

model PostJob {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  work        Work          @relation(fields: [workId], references: [id])
  workId      Int
  address     String
  thanhpho    String?
  quanhuyen   String?
  salary      Int?
  descrition  String?
  photoURL    String?
  status      Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Application Application[]

  @@map("postjobs")
}

model Application {
  id         Int      @id @default(autoincrement())
  employee   User     @relation(fields: [employeeId], references: [id])
  employeeId Int
  content    String?
  postJob    PostJob  @relation(fields: [postJobId], references: [id])
  postJobId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     Boolean

  @@map("applications")
}

model Contract {
  id      Int    @id @default(autoincrement())
  user1Id Int
  user1   User   @relation(fields: [user1Id], references: [id])
  user2Id Int
  user2   User   @relation(name: "employee", fields: [user2Id], references: [id])
  content String
  status  Status

  @@map("contracts")
}

model Notification {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation(fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
  content    String
  isRead     Boolean  @default(false)
  postId     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("notifications")
}

// model RoomChat {
//   id             Int          @id @default(autoincrement())
//   userId         Int
//   user           User         @relation(fields: [userId], references: [id])
//   conversationId Int
//   conversation   Conversation @relation(fields: [conversationId], references: [id])

//   @@map("roomchats")
// }

model Member {
  id             Int          @id @default(autoincrement())
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  seen           Boolean      @default(true)

  @@map("members")
}

model Conversation {
  id          Int       @id @default(autoincrement())
  Message     Message[]
  Member      Member[]
  lastMessage String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("conversations")
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         Int
  user           User         @relation(fields: [userId], references: [id])
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("messages")
}

enum Status {
  PROCESSING
  COMPLETED
}

enum Role {
  USER
  EMPLOYEE
  ADMIN
}
